# -*- coding: utf-8 -*-
"""gestion_Exceptions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1phML1tqcwVsD9VIk3VMI4DssTBuQNKK_

#Examen : Djambala GORY

#2. Gestion des exceptions : Exemple sur la fonction factorielle.
"""

# Fonction de gestion de chaine de caractère :
def est_chaine(a):
  if type(a)==str:
    while type(a)==str:
      try:
        a=int(input("Veuillez entrée une valeur numérique: "))
      except ValueError:
        a=int(input("Veuillez entrée une valeur numérique : "))
  
  return a

# Fonction de gestion de nombre complexe :
def est_complexe(a):
  if (type(a)==complex) :
    a= a.real 
  else:
    a=a.real 
  return a

# Fonction gestion des valeurs négatives :
def est_negative(a):
  if a <= 0:
    while a <= 0:
      try:
        a=int(input("Saisissez une valeur positive :"))
      except ValueError:
        a=int(input("Entrée une valeur positive :"))
  return a

# Fonction de gestion des bornes :
  #Cette fonction servira à delimiter la valeur du n pour la factorisation par une borne (min,max)
  # Nous partons du principe que min < max.
def borne(a,min,max): 
  if a > max:
    while a > max:
      try:
        a=int(input("La valeur est inférieure à la limite autorisée : "))
      except ValueError:
        a=int(input("Veuillez entrée une valeur inférieure à la limite autorisée : "))
  else:
    if a < min:
        while a < min:
          try:
            a=int(input("La valeur est supérieure à la limite autorisée : "))
          except ValueError:
            a=int(input("Veuillez entrée une valeur supérieure à la limite autorisée : "))
  return a

# Fonction factorielle 

def g_factorielle(n):

  # appel de la fonction de vérification de valeurs chaines
  n_ch=(est_chaine(n))
 
  # appel de la fonction de vérification de valeurs complexes
  n_cpl=est_complexe(n_ch)
  
  # appel de la fonction de vérification de valeur nulle
  
  n_neg=est_negative(n_cpl)

  # appel de la fonction de vérification de valeur hors norme
  min=int(input("Entre la valeur minimun :"))
  max=int(input("Entrée la valeur maximun :"))

  if min > max :
      while min > max:
        try:
          min=int(input("La valeur du min doit-être inférieure à celle de max : "))
        except ValueError:
          min=int(input("Veuillez entrée une valeur min inférieure à max : "))
  else:
    n=borne(n_neg,min,max)


  if n == 0: # Traitement du cas où n = 0
    return 1
  else:
    F = 1
    for k in range(2,n+1): # Itération sur les valeurs de 1 à n afin d'appliquer la multiplication
        F = F * k
    return F

g_factorielle("toto")